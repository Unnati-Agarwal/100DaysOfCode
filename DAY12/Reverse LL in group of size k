# Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list. 
  k is a positive integer and is less than or equal to the length of the linked list. 
  If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
  
  class Solution {
public:
    ListNode *rev(ListNode* head)
    {
        ListNode *root =NULL;
        while(head!=NULL)
        {
          ListNode *temp=new ListNode(head->val);
          if(root==NULL)
              root=temp;
          else
          {    
             temp->next=root;
             root=temp;
          }
          head=head->next;
        }
        return root;
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) 
    {
        ListNode *temp=head,*ptr=head;
        int l=0;
        while(temp!=NULL)
        {
            l++;
            temp=temp->next;
        }
        ListNode *node=new ListNode();
        node=NULL;
        for(int i=0;i<l/k;i++)
        {
           ListNode *t=ptr;
           for(int j=0;j<k-1;j++)
               ptr=ptr->next;
            
           ListNode *pre=ptr->next;
           ptr->next=NULL;
           ptr=pre;
           ListNode *r=rev(t);
           if(node==NULL)
           {
               node=r;
           }
           else
           {
               ListNode *n=node;
               while(n->next!=NULL)
                  n=n->next;
               
               n->next=r;
           }
        }
        if(ptr!=NULL)
        {
            ListNode *n=node;
               while(n->next!=NULL)
                  n=n->next;
               
               n->next=ptr;
        }
        return node;
    }
};
