#Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

class Solution {
public:
    ListNode *detectCycle(ListNode *head) 
    {
        unordered_set<ListNode*>st;
        ListNode *n=NULL;
        while(head!=NULL)
        {
            if(st.find(head)!=st.end())
                return head;
            
            st.insert(head);
            head=head->next;
        }
        return NULL;
    }
};
